{"version":3,"sources":["store/ducks/bitcoin.js","store/store.js","components/App/App.js","index.js"],"names":["getDataProduct","fetchSaga","SET_LIST","GET_PRODUCTS_FROM_SERVER","initialState","bitcoinData","call","fetch","then","res","json","data","put","type","console","error","takeLatest","reducer","state","action","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","listBitcoin","applyMiddleware","run","connect","bitcoin","dispatch","requestProducts","useState","usdInfo","setUsdInfo","gbpInfo","setGbpInfo","eurInfo","setEurInfo","useEffect","bpi","USDArray","GBPArray","EURArray","Object","entries","USD","key","value","push","GBP","EUR","map","ReactDOM","render","document","getElementById"],"mappings":"q2BAYiBA,G,WA8BAC,GAtCJC,EAAW,WACXC,EAA2B,2BAG3BC,EAAe,CAC1BC,YAAa,IAGR,SAAUL,IAAV,uEAGU,MAFH,oDADP,kBAGgBM,aAAK,WACtB,OAAOC,MAHC,qDAILC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,aALlB,OAOD,OAJIC,EAHH,gBAOKC,YAAI,CAAEC,KAAKX,EAAUS,SAP1B,uDASDG,QAAQC,MAAM,kCATb,qDA8BA,SAAUd,IAAV,iEACL,OADK,SACCe,YAAWb,EAA0BH,GADtC,uCAKQiB,MAnBQ,WAAmC,IAAlCC,EAAiC,uDAAzBd,EAAce,EAAW,uCACvD,OAAQA,EAAON,MACb,KAAKX,EAEH,OAAO,EAAP,GACKgB,EADL,CAEEb,YAAac,EAAOR,OAGxB,QACE,OAAOO,IClCPE,EAAiBC,cAEnBC,EAAQC,YAAYC,YAAgB,CACtCC,YAAaR,IACVS,YAAgBN,IAErBA,EAAeO,IAAI1B,GAEJqB,Q,OCuDAM,G,MAAAA,aAJE,SAAAV,GAAK,MAAK,CACzBW,QAASX,EAAMO,YAAYpB,gBAJF,SAAAyB,GAAQ,MAAK,CACtCC,gBAAkB,kBAAMD,EFnCe,CAAEjB,KAAMV,QEyClCyB,EA5DH,SAAC,GAAkC,IAAhCG,EAA+B,EAA/BA,gBAAiBF,EAAc,EAAdA,QAAc,EAEdG,mBAAS,MAFK,mBAErCC,EAFqC,KAE5BC,EAF4B,OAGdF,mBAAS,MAHK,mBAGrCG,EAHqC,KAG5BC,EAH4B,OAIdJ,mBAAS,MAJK,mBAIrCK,EAJqC,KAI5BC,EAJ4B,KA0C5C,OArCAC,qBAAU,WACRR,MACC,IAEDQ,qBAAU,WACV,GAAIV,EAAQW,IAAK,CAKf,IAJA,IAAIC,EAAW,GACXC,EAAW,GACXC,EAAW,GAEf,MAAwBC,OAAOC,QAAQhB,EAAQW,IAAIM,KAAnD,eAAyD,CAAC,IAAD,0BAA/CC,EAA+C,KAA3CC,EAA2C,KACvDP,EAASQ,KAAK,CACZF,MACAC,UAIJ,cAAwBJ,OAAOC,QAAQhB,EAAQW,IAAIU,KAAnD,eAAyD,CAAC,IAAD,0BAA/CH,EAA+C,KAA3CC,EAA2C,KACvDN,EAASO,KAAK,CACZF,MACAC,UAGJ,cAAwBJ,OAAOC,QAAQhB,EAAQW,IAAIW,KAAnD,eAAyD,CAAC,IAAD,0BAA/CJ,EAA+C,KAA3CC,EAA2C,KACvDL,EAASM,KAAK,CACZF,MACAC,UAIJV,EAAWK,GACXT,EAAWO,GACXL,EAAWM,MAGX,CAACb,EAAQW,MAGX,6BACE,4BACGP,GAAWA,EAAQmB,KAAI,gBAAEL,EAAF,EAAEA,IAAIC,EAAN,EAAMA,MAAN,OAAiB,yBAAKD,IAAKA,GAAMC,MACxDb,GAAWA,EAAQiB,KAAI,gBAAEL,EAAF,EAAEA,IAAIC,EAAN,EAAMA,MAAN,OAAiB,yBAAKD,IAAKA,GAAMC,MACxDX,GAAWA,EAAQe,KAAI,gBAAEL,EAAF,EAAEA,IAAIC,EAAN,EAAMA,MAAN,OAAiB,yBAAKD,IAAKA,GAAMC,Y,MC9CjEK,IAASC,OACP,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAUhC,MAAOA,GAEd,kBAAC,EAAD,QAINiC,SAASC,eAAe,W","file":"static/js/main.bf07cf5c.chunk.js","sourcesContent":["import { takeLatest } from 'redux-saga/effects';\nimport { put, call } from 'redux-saga/effects';\n\n//actione\nexport const SET_LIST = 'SET_LIST';\nexport const GET_PRODUCTS_FROM_SERVER = 'GET_PRODUCTS_FROM_SERVER';\n\n// state\nexport const initialState = {\n  bitcoinData: [],\n};\n\nexport function* getDataProduct() {\n  const url = 'https://api.coindesk.com/v1/bpi/currentprice.json';\n  try {\n    const data = yield call(() => {\n      return fetch(url)\n        .then(res => res.json())\n    })  \n      yield put({ type:SET_LIST, data })\n  } catch (error) {\n      console.error('fetchUsers return erros: ' + error);\n  }\n}\n\n//dispatch\nexport const requestForProducts = () => ({ type: GET_PRODUCTS_FROM_SERVER });\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LIST:\n      //move to another func\n      return {\n        ...state,\n        bitcoinData: action.data,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport function* fetchSaga() {\n  yield takeLatest(GET_PRODUCTS_FROM_SERVER, getDataProduct)\n}\n\n\nexport default reducer;","import {createStore , combineReducers , applyMiddleware } from 'redux';\nimport createSagaMiddleware  from 'redux-saga';\nimport reducer, { fetchSaga } from './ducks/bitcoin';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nlet store = createStore(combineReducers({\n  listBitcoin: reducer,\n}) , applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(fetchSaga)\n\nexport default store;","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { requestForProducts } from '../../store/ducks/bitcoin';\n\nimport './App.css';\n\nconst App = ({ requestProducts, bitcoin }) => {\n\n  const [usdInfo, setUsdInfo] = useState(null);\n  const [gbpInfo, setGbpInfo] = useState(null);\n  const [eurInfo, setEurInfo] = useState(null);\n  useEffect(()=> {\n    requestProducts();\n   },[])\n\n    useEffect(() => {\n    if (bitcoin.bpi) {\n      let USDArray = [];\n      let GBPArray = [];\n      let EURArray = [];\n\n      for (let [key,value] of Object.entries(bitcoin.bpi.USD)) {\n        USDArray.push({\n          key,\n          value\n        }) \n      }\n      \n      for (let [key,value] of Object.entries(bitcoin.bpi.GBP)) {\n        GBPArray.push({\n          key,\n          value\n        }) \n      }\n      for (let [key,value] of Object.entries(bitcoin.bpi.EUR)) {\n        EURArray.push({\n          key,\n          value\n        }) \n      }\n      \n      setEurInfo(EURArray);\n      setUsdInfo(USDArray);\n      setGbpInfo(GBPArray);\n\n    }\n   }, [bitcoin.bpi])\n\n  return (\n    <div>\n      <ul>\n        {usdInfo && usdInfo.map(({key,value}) => <div key={key}>{value}</div>)}\n        {gbpInfo && gbpInfo.map(({key,value}) => <div key={key}>{value}</div>)}\n        {eurInfo && eurInfo.map(({key,value}) => <div key={key}>{value}</div>)}\n      </ul>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  requestProducts: (() => dispatch(requestForProducts()))\n});\nconst mapState = state => ({\n  bitcoin: state.listBitcoin.bitcoinData,\n});\n\nexport default connect(\n  mapState,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n     <Provider store={store}>\n     \n        <App />\n\n     </Provider>\n  </BrowserRouter>, \n  document.getElementById('root'));"],"sourceRoot":""}